// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace windows_store {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class WindowsStoreApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Represents the kind of product available in the Microsoft Store.
// https://learn.microsoft.com/en-us/uwp/api/windows.services.store.storeproduct.productkind?view=winrt-26100#windows-services-store-storeproduct-productkind
enum class StoreProductKind {
  kApplication = 0,
  kGame = 1,
  kConsumable = 2,
  kUnmanagedConsumable = 3,
  // An add-on that persists for the lifetime that you specify in Partner Center.
  // By default, durable add-ons never expire, in which case they can only be purchased once.
  // If you specify a particular duration for the add-on, the user can repurchase the add-on after it expires.
  // Note: A StoreProduct that represents a subscription add-on has the type Durable.
  kDurable = 4
};

// Defines values that represent the units of a trial period or billing period for a subscription
enum class StoreSubscriptionBillingPeriodUnit {
  kMinute = 0,
  kHour = 1,
  kDay = 2,
  kWeek = 3,
  kMonth = 4,
  kYear = 5
};


// Gets valid license info for durables add-on that is associated with the current app
// Invalid license are not included, licenses for consumable add-ons are not included.
//
// Generated class from Pigeon that represents data sent in messages.
class AddOnLicenseInner {
 public:
  // Constructs an object setting all fields.
  explicit AddOnLicenseInner(
    const std::string& in_app_offer_token,
    const std::string& sku_store_id,
    const std::string& expiration_date);

  // The product ID for the add-on.
  const std::string& in_app_offer_token() const;
  void set_in_app_offer_token(std::string_view value_arg);

  // The Store ID of the licensed add-on SKU from the Microsoft Store catalog.
  const std::string& sku_store_id() const;
  void set_sku_store_id(std::string_view value_arg);

  // Gets the expiration date and time for the add-on license. (ISO 8601)
  const std::string& expiration_date() const;
  void set_expiration_date(std::string_view value_arg);

 private:
  static AddOnLicenseInner FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class WindowsStoreApi;
  friend class PigeonInternalCodecSerializer;
  std::string in_app_offer_token_;
  std::string sku_store_id_;
  std::string expiration_date_;
};


// Provides license info for the current app, including licenses for products that are offered by the app.
// https://learn.microsoft.com/en-us/uwp/api/windows.services.store.storeapplicense?view=winrt-26100
//
// Generated class from Pigeon that represents data sent in messages.
class StoreAppLicenseInner {
 public:
  // Constructs an object setting all fields.
  explicit StoreAppLicenseInner(
    bool is_active,
    bool is_trial,
    const std::string& sku_store_id,
    const std::string& trial_unique_id,
    int64_t trial_time_remaining,
    const std::string& expiration_date,
    const flutter::EncodableList& add_on_licenses);

  // Indicates whether the license is valid and provides the current user an entitlement to use the app.
  bool is_active() const;
  void set_is_active(bool value_arg);

  // Indicates whether the license is a trial license.
  bool is_trial() const;
  void set_is_trial(bool value_arg);

  // Store ID of the licensed app SKU from the Microsoft Store catalog
  const std::string& sku_store_id() const;
  void set_sku_store_id(std::string_view value_arg);

  // Unique ID that identifies the combination of the current user and the usage-limited trial that is associated with this app license
  // (see trialTimeRemaining)
  const std::string& trial_unique_id() const;
  void set_trial_unique_id(std::string_view value_arg);

  // The remaining time for the usage-limited trial that is associated with this app license.
  // This property is intended to be used by developers who have configured their app as a 
  // usage-limited trial in Partner Center. 
  // Usage-limited trials are currently available only to some developer accounts in Xbox managed partner programs.
  // https://learn.microsoft.com/en-us/uwp/api/windows.services.store.storeapplicense.trialtimeremaining?view=winrt-26100
  int64_t trial_time_remaining() const;
  void set_trial_time_remaining(int64_t value_arg);

  // Expiration date and time for the app license (ISO 8601)
  const std::string& expiration_date() const;
  void set_expiration_date(std::string_view value_arg);

  // Valid license info for durables add-on that is associated with the current app
  const flutter::EncodableList& add_on_licenses() const;
  void set_add_on_licenses(const flutter::EncodableList& value_arg);

 private:
  static StoreAppLicenseInner FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class WindowsStoreApi;
  friend class PigeonInternalCodecSerializer;
  bool is_active_;
  bool is_trial_;
  std::string sku_store_id_;
  std::string trial_unique_id_;
  int64_t trial_time_remaining_;
  std::string expiration_date_;
  flutter::EncodableList add_on_licenses_;
};


// Contains pricing info for a product listing in the Microsoft Store.
// https://learn.microsoft.com/en-us/uwp/api/windows.services.store.storeprice?view=winrt-26100
//
// Generated class from Pigeon that represents data sent in messages.
class StorePriceInner {
 public:
  // Constructs an object setting all fields.
  explicit StorePriceInner(
    const std::string& currency_code,
    bool is_on_sale,
    const std::string& sale_end_date,
    const std::string& formatted_base_price,
    const std::string& formatted_price,
    const std::string& formatted_recurrence_price);

  // Gets the ISO 4217 currency code for the market of the current user.
  const std::string& currency_code() const;
  void set_currency_code(std::string_view value_arg);

  // Gets a value that indicates whether the product is on sale.
  bool is_on_sale() const;
  void set_is_on_sale(bool value_arg);

  // Gets the end date for the sale period for the product, if the product is on sale. (ISO 8601)
  const std::string& sale_end_date() const;
  void set_sale_end_date(std::string_view value_arg);

  // Gets the base price for the product with the appropriate formatting for the market of the current user.
  const std::string& formatted_base_price() const;
  void set_formatted_base_price(std::string_view value_arg);

  // Gets the purchase price for the product with the appropriate formatting for the market of the current user.
  const std::string& formatted_price() const;
  void set_formatted_price(std::string_view value_arg);

  // Gets the recurring price for the product with the appropriate formatting for the market of the current user, if recurring billing is enabled for this product.
  const std::string& formatted_recurrence_price() const;
  void set_formatted_recurrence_price(std::string_view value_arg);

 private:
  static StorePriceInner FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class StoreProductSkuInner;
  friend class StoreProductInner;
  friend class WindowsStoreApi;
  friend class PigeonInternalCodecSerializer;
  std::string currency_code_;
  bool is_on_sale_;
  std::string sale_end_date_;
  std::string formatted_base_price_;
  std::string formatted_price_;
  std::string formatted_recurrence_price_;
};


// Provides subscription info for a product SKU that represents a subscription with recurring billing.
// https://learn.microsoft.com/en-us/uwp/api/windows.services.store.storesubscriptioninfo?view=winrt-26100
//
// Generated class from Pigeon that represents data sent in messages.
class StoreSubscriptionInfoInner {
 public:
  // Constructs an object setting all fields.
  explicit StoreSubscriptionInfoInner(
    int64_t billing_period,
    const StoreSubscriptionBillingPeriodUnit& billing_period_unit,
    bool has_trial_period,
    int64_t trial_period,
    const StoreSubscriptionBillingPeriodUnit& trial_period_unit);

  // Duration of the billing period for a subscription, in the units specified by the BillingPeriodUnit property.
  int64_t billing_period() const;
  void set_billing_period(int64_t value_arg);

  // Units of the billing period for a subscription.
  const StoreSubscriptionBillingPeriodUnit& billing_period_unit() const;
  void set_billing_period_unit(const StoreSubscriptionBillingPeriodUnit& value_arg);

  // Value that indicates whether the subscription contains a trial period.
  bool has_trial_period() const;
  void set_has_trial_period(bool value_arg);

  // Duration of the trial period for the subscription, in the units specified by the TrialPeriodUnit property. To determine whether the subscription has a trial period, use the HasTrialPeriod property.
  int64_t trial_period() const;
  void set_trial_period(int64_t value_arg);

  // Units of the trial period for the subscription
  const StoreSubscriptionBillingPeriodUnit& trial_period_unit() const;
  void set_trial_period_unit(const StoreSubscriptionBillingPeriodUnit& value_arg);

 private:
  static StoreSubscriptionInfoInner FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class StoreProductSkuInner;
  friend class WindowsStoreApi;
  friend class PigeonInternalCodecSerializer;
  int64_t billing_period_;
  StoreSubscriptionBillingPeriodUnit billing_period_unit_;
  bool has_trial_period_;
  int64_t trial_period_;
  StoreSubscriptionBillingPeriodUnit trial_period_unit_;
};


// Provides info for a stock keeping unit (SKU) of a product in the Microsoft Store
// https://learn.microsoft.com/en-us/uwp/api/windows.services.store.storesku?view=winrt-26100
//
// Generated class from Pigeon that represents data sent in messages.
class StoreProductSkuInner {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit StoreProductSkuInner(
    const std::string& store_id,
    bool is_trial,
    bool is_subscription,
    const std::string& description,
    const std::string& title,
    const StorePriceInner& price);

  // Constructs an object setting all fields.
  explicit StoreProductSkuInner(
    const std::string& store_id,
    bool is_trial,
    bool is_subscription,
    const std::string& description,
    const std::string& title,
    const StoreSubscriptionInfoInner* subscription_info,
    const StorePriceInner& price);

  ~StoreProductSkuInner() = default;
  StoreProductSkuInner(const StoreProductSkuInner& other);
  StoreProductSkuInner& operator=(const StoreProductSkuInner& other);
  StoreProductSkuInner(StoreProductSkuInner&& other) = default;
  StoreProductSkuInner& operator=(StoreProductSkuInner&& other) noexcept = default;
  // Store ID of this product SKU
  const std::string& store_id() const;
  void set_store_id(std::string_view value_arg);

  // Indicates whether this product SKU is a trial SKU
  bool is_trial() const;
  void set_is_trial(bool value_arg);

  // Indicates whether this product SKU is a subscription SKU
  bool is_subscription() const;
  void set_is_subscription(bool value_arg);

  // Product SKU description from the Microsoft Store listing.
  const std::string& description() const;
  void set_description(std::string_view value_arg);

  // Product SKU title from the Microsoft Store listing.
  const std::string& title() const;
  void set_title(std::string_view value_arg);

  // Subscription information for this product SKU, if this product SKU is a subscription with recurring billing. 
  // To determine whether this product SKU is a subscription, use the IsSubscription property.
  const StoreSubscriptionInfoInner* subscription_info() const;
  void set_subscription_info(const StoreSubscriptionInfoInner* value_arg);
  void set_subscription_info(const StoreSubscriptionInfoInner& value_arg);

  // Price of the default availability for this product SKU.
  const StorePriceInner& price() const;
  void set_price(const StorePriceInner& value_arg);

 private:
  static StoreProductSkuInner FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class WindowsStoreApi;
  friend class PigeonInternalCodecSerializer;
  std::string store_id_;
  bool is_trial_;
  bool is_subscription_;
  std::string description_;
  std::string title_;
  std::unique_ptr<StoreSubscriptionInfoInner> subscription_info_;
  std::unique_ptr<StorePriceInner> price_;
};


// Add-on associated to the application in the Microsoft Store
// https://learn.microsoft.com/en-us/uwp/api/windows.services.store.storeproduct?view=winrt-26100
//
// Generated class from Pigeon that represents data sent in messages.
class StoreProductInner {
 public:
  // Constructs an object setting all fields.
  explicit StoreProductInner(
    const std::string& store_id,
    const std::string& description,
    const std::string& title,
    const std::string& in_app_offer_token,
    const StoreProductKind& product_kind,
    const StorePriceInner& price,
    const flutter::EncodableList& skus);

  ~StoreProductInner() = default;
  StoreProductInner(const StoreProductInner& other);
  StoreProductInner& operator=(const StoreProductInner& other);
  StoreProductInner(StoreProductInner&& other) = default;
  StoreProductInner& operator=(StoreProductInner&& other) noexcept = default;
  // Gets the Store ID for this product. For an add-on, this property corresponds to the Store ID that is available on the overview page for the add-on.
  const std::string& store_id() const;
  void set_store_id(std::string_view value_arg);

  // Gets the product description from the Microsoft Store listing.
  const std::string& description() const;
  void set_description(std::string_view value_arg);

  // Gets the product title from the Microsoft Store listing.
  const std::string& title() const;
  void set_title(std::string_view value_arg);

  // Gets the product ID for this product, if the current StoreProduct represents an add-on.
  const std::string& in_app_offer_token() const;
  void set_in_app_offer_token(std::string_view value_arg);

  // Gets the type of the product.
  const StoreProductKind& product_kind() const;
  void set_product_kind(const StoreProductKind& value_arg);

  // Gets the price for the default SKU and availability for the product.
  const StorePriceInner& price() const;
  void set_price(const StorePriceInner& value_arg);

  // List of available SKUs for the product. 
  const flutter::EncodableList& skus() const;
  void set_skus(const flutter::EncodableList& value_arg);

 private:
  static StoreProductInner FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class WindowsStoreApi;
  friend class PigeonInternalCodecSerializer;
  std::string store_id_;
  std::string description_;
  std::string title_;
  std::string in_app_offer_token_;
  StoreProductKind product_kind_;
  std::unique_ptr<StorePriceInner> price_;
  flutter::EncodableList skus_;
};


// Generated class from Pigeon that represents data sent in messages.
class AssociatedStoreProductsInner {
 public:
  // Constructs an object setting all fields.
  explicit AssociatedStoreProductsInner(const flutter::EncodableList& products);

  const flutter::EncodableList& products() const;
  void set_products(const flutter::EncodableList& value_arg);

 private:
  static AssociatedStoreProductsInner FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class WindowsStoreApi;
  friend class PigeonInternalCodecSerializer;
  flutter::EncodableList products_;
};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;
 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class WindowsStoreApi {
 public:
  WindowsStoreApi(const WindowsStoreApi&) = delete;
  WindowsStoreApi& operator=(const WindowsStoreApi&) = delete;
  virtual ~WindowsStoreApi() {}
  virtual void GetAppLicenseAsync(std::function<void(ErrorOr<StoreAppLicenseInner> reply)> result) = 0;
  // Gets Microsoft Store listing info for the products that can be purchased from within the current app.
  // productKind: The kind of product to retrieve.
  virtual void GetAssociatedStoreProductsAsync(
    const StoreProductKind& product_kind,
    std::function<void(ErrorOr<AssociatedStoreProductsInner> reply)> result) = 0;

  // The codec used by WindowsStoreApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `WindowsStoreApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    WindowsStoreApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    WindowsStoreApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);
 protected:
  WindowsStoreApi() = default;
};
}  // namespace windows_store
#endif  // PIGEON_MESSAGES_G_H_
