// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace windows_store {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// StoreAppLicenseInner

StoreAppLicenseInner::StoreAppLicenseInner(
  bool is_active,
  bool is_trial,
  const std::string& sku_store_id,
  const std::string& trial_unique_id,
  int64_t trial_time_remaining)
 : is_active_(is_active),
    is_trial_(is_trial),
    sku_store_id_(sku_store_id),
    trial_unique_id_(trial_unique_id),
    trial_time_remaining_(trial_time_remaining) {}

bool StoreAppLicenseInner::is_active() const {
  return is_active_;
}

void StoreAppLicenseInner::set_is_active(bool value_arg) {
  is_active_ = value_arg;
}


bool StoreAppLicenseInner::is_trial() const {
  return is_trial_;
}

void StoreAppLicenseInner::set_is_trial(bool value_arg) {
  is_trial_ = value_arg;
}


const std::string& StoreAppLicenseInner::sku_store_id() const {
  return sku_store_id_;
}

void StoreAppLicenseInner::set_sku_store_id(std::string_view value_arg) {
  sku_store_id_ = value_arg;
}


const std::string& StoreAppLicenseInner::trial_unique_id() const {
  return trial_unique_id_;
}

void StoreAppLicenseInner::set_trial_unique_id(std::string_view value_arg) {
  trial_unique_id_ = value_arg;
}


int64_t StoreAppLicenseInner::trial_time_remaining() const {
  return trial_time_remaining_;
}

void StoreAppLicenseInner::set_trial_time_remaining(int64_t value_arg) {
  trial_time_remaining_ = value_arg;
}


EncodableList StoreAppLicenseInner::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(is_active_));
  list.push_back(EncodableValue(is_trial_));
  list.push_back(EncodableValue(sku_store_id_));
  list.push_back(EncodableValue(trial_unique_id_));
  list.push_back(EncodableValue(trial_time_remaining_));
  return list;
}

StoreAppLicenseInner StoreAppLicenseInner::FromEncodableList(const EncodableList& list) {
  StoreAppLicenseInner decoded(
    std::get<bool>(list[0]),
    std::get<bool>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    std::get<int64_t>(list[4]));
  return decoded;
}

// StorePriceInner

StorePriceInner::StorePriceInner(
  const std::string& currency_code,
  bool is_on_sale,
  const std::string& sale_end_date,
  const std::string& formatted_base_price,
  const std::string& formatted_price,
  const std::string& formatted_recurrence_price)
 : currency_code_(currency_code),
    is_on_sale_(is_on_sale),
    sale_end_date_(sale_end_date),
    formatted_base_price_(formatted_base_price),
    formatted_price_(formatted_price),
    formatted_recurrence_price_(formatted_recurrence_price) {}

const std::string& StorePriceInner::currency_code() const {
  return currency_code_;
}

void StorePriceInner::set_currency_code(std::string_view value_arg) {
  currency_code_ = value_arg;
}


bool StorePriceInner::is_on_sale() const {
  return is_on_sale_;
}

void StorePriceInner::set_is_on_sale(bool value_arg) {
  is_on_sale_ = value_arg;
}


const std::string& StorePriceInner::sale_end_date() const {
  return sale_end_date_;
}

void StorePriceInner::set_sale_end_date(std::string_view value_arg) {
  sale_end_date_ = value_arg;
}


const std::string& StorePriceInner::formatted_base_price() const {
  return formatted_base_price_;
}

void StorePriceInner::set_formatted_base_price(std::string_view value_arg) {
  formatted_base_price_ = value_arg;
}


const std::string& StorePriceInner::formatted_price() const {
  return formatted_price_;
}

void StorePriceInner::set_formatted_price(std::string_view value_arg) {
  formatted_price_ = value_arg;
}


const std::string& StorePriceInner::formatted_recurrence_price() const {
  return formatted_recurrence_price_;
}

void StorePriceInner::set_formatted_recurrence_price(std::string_view value_arg) {
  formatted_recurrence_price_ = value_arg;
}


EncodableList StorePriceInner::ToEncodableList() const {
  EncodableList list;
  list.reserve(6);
  list.push_back(EncodableValue(currency_code_));
  list.push_back(EncodableValue(is_on_sale_));
  list.push_back(EncodableValue(sale_end_date_));
  list.push_back(EncodableValue(formatted_base_price_));
  list.push_back(EncodableValue(formatted_price_));
  list.push_back(EncodableValue(formatted_recurrence_price_));
  return list;
}

StorePriceInner StorePriceInner::FromEncodableList(const EncodableList& list) {
  StorePriceInner decoded(
    std::get<std::string>(list[0]),
    std::get<bool>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    std::get<std::string>(list[4]),
    std::get<std::string>(list[5]));
  return decoded;
}

// StoreProductInner

StoreProductInner::StoreProductInner(
  const std::string& store_id,
  const std::string& description,
  const std::string& title,
  const std::string& in_app_offer_token,
  const StoreProductKind& product_kind,
  const StorePriceInner& price)
 : store_id_(store_id),
    description_(description),
    title_(title),
    in_app_offer_token_(in_app_offer_token),
    product_kind_(product_kind),
    price_(std::make_unique<StorePriceInner>(price)) {}

StoreProductInner::StoreProductInner(const StoreProductInner& other)
 : store_id_(other.store_id_),
    description_(other.description_),
    title_(other.title_),
    in_app_offer_token_(other.in_app_offer_token_),
    product_kind_(other.product_kind_),
    price_(std::make_unique<StorePriceInner>(*other.price_)) {}

StoreProductInner& StoreProductInner::operator=(const StoreProductInner& other) {
  store_id_ = other.store_id_;
  description_ = other.description_;
  title_ = other.title_;
  in_app_offer_token_ = other.in_app_offer_token_;
  product_kind_ = other.product_kind_;
  price_ = std::make_unique<StorePriceInner>(*other.price_);
  return *this;
}

const std::string& StoreProductInner::store_id() const {
  return store_id_;
}

void StoreProductInner::set_store_id(std::string_view value_arg) {
  store_id_ = value_arg;
}


const std::string& StoreProductInner::description() const {
  return description_;
}

void StoreProductInner::set_description(std::string_view value_arg) {
  description_ = value_arg;
}


const std::string& StoreProductInner::title() const {
  return title_;
}

void StoreProductInner::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string& StoreProductInner::in_app_offer_token() const {
  return in_app_offer_token_;
}

void StoreProductInner::set_in_app_offer_token(std::string_view value_arg) {
  in_app_offer_token_ = value_arg;
}


const StoreProductKind& StoreProductInner::product_kind() const {
  return product_kind_;
}

void StoreProductInner::set_product_kind(const StoreProductKind& value_arg) {
  product_kind_ = value_arg;
}


const StorePriceInner& StoreProductInner::price() const {
  return *price_;
}

void StoreProductInner::set_price(const StorePriceInner& value_arg) {
  price_ = std::make_unique<StorePriceInner>(value_arg);
}


EncodableList StoreProductInner::ToEncodableList() const {
  EncodableList list;
  list.reserve(6);
  list.push_back(EncodableValue(store_id_));
  list.push_back(EncodableValue(description_));
  list.push_back(EncodableValue(title_));
  list.push_back(EncodableValue(in_app_offer_token_));
  list.push_back(CustomEncodableValue(product_kind_));
  list.push_back(CustomEncodableValue(*price_));
  return list;
}

StoreProductInner StoreProductInner::FromEncodableList(const EncodableList& list) {
  StoreProductInner decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    std::any_cast<const StoreProductKind&>(std::get<CustomEncodableValue>(list[4])),
    std::any_cast<const StorePriceInner&>(std::get<CustomEncodableValue>(list[5])));
  return decoded;
}

// AssociatedStoreProductsInner

AssociatedStoreProductsInner::AssociatedStoreProductsInner(const EncodableList& products)
 : products_(products) {}

const EncodableList& AssociatedStoreProductsInner::products() const {
  return products_;
}

void AssociatedStoreProductsInner::set_products(const EncodableList& value_arg) {
  products_ = value_arg;
}


EncodableList AssociatedStoreProductsInner::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(products_));
  return list;
}

AssociatedStoreProductsInner AssociatedStoreProductsInner::FromEncodableList(const EncodableList& list) {
  AssociatedStoreProductsInner decoded(
    std::get<EncodableList>(list[0]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<StoreProductKind>(enum_arg_value));
      }
    case 130: {
        return CustomEncodableValue(StoreAppLicenseInner::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 131: {
        return CustomEncodableValue(StorePriceInner::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 132: {
        return CustomEncodableValue(StoreProductInner::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 133: {
        return CustomEncodableValue(AssociatedStoreProductsInner::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(StoreProductKind)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<StoreProductKind>(*custom_value))), stream);
      return;
    }
    if (custom_value->type() == typeid(StoreAppLicenseInner)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<StoreAppLicenseInner>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(StorePriceInner)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<StorePriceInner>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(StoreProductInner)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<StoreProductInner>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(AssociatedStoreProductsInner)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<AssociatedStoreProductsInner>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by WindowsStoreApi.
const flutter::StandardMessageCodec& WindowsStoreApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `WindowsStoreApi` to handle messages through the `binary_messenger`.
void WindowsStoreApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  WindowsStoreApi* api) {
  WindowsStoreApi::SetUp(binary_messenger, api, "");
}

void WindowsStoreApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  WindowsStoreApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.windows_store.WindowsStoreApi.getAppLicenseAsync" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->GetAppLicenseAsync([reply](ErrorOr<StoreAppLicenseInner>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.windows_store.WindowsStoreApi.getAssociatedStoreProductsAsync" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_product_kind_arg = args.at(0);
          if (encodable_product_kind_arg.IsNull()) {
            reply(WrapError("product_kind_arg unexpectedly null."));
            return;
          }
          const auto& product_kind_arg = std::any_cast<const StoreProductKind&>(std::get<CustomEncodableValue>(encodable_product_kind_arg));
          api->GetAssociatedStoreProductsAsync(product_kind_arg, [reply](ErrorOr<AssociatedStoreProductsInner>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue WindowsStoreApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue WindowsStoreApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace windows_store
